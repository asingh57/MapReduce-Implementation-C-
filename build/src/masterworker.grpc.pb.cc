// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterworker.proto

#include "masterworker.pb.h"
#include "masterworker.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace masterworker {

static const char* master_method_names[] = {
  "/masterworker.master/getJob",
};

std::unique_ptr< master::Stub> master::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< master::Stub> stub(new master::Stub(channel));
  return stub;
}

master::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getJob_(master_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status master::Stub::getJob(::grpc::ClientContext* context, const ::masterworker::workerInfo& request, ::masterworker::workerJob* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getJob_, context, request, response);
}

void master::Stub::experimental_async::getJob(::grpc::ClientContext* context, const ::masterworker::workerInfo* request, ::masterworker::workerJob* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getJob_, context, request, response, std::move(f));
}

void master::Stub::experimental_async::getJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::workerJob* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getJob_, context, request, response, std::move(f));
}

void master::Stub::experimental_async::getJob(::grpc::ClientContext* context, const ::masterworker::workerInfo* request, ::masterworker::workerJob* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getJob_, context, request, response, reactor);
}

void master::Stub::experimental_async::getJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::workerJob* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::masterworker::workerJob>* master::Stub::AsyncgetJobRaw(::grpc::ClientContext* context, const ::masterworker::workerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::workerJob>::Create(channel_.get(), cq, rpcmethod_getJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::masterworker::workerJob>* master::Stub::PrepareAsyncgetJobRaw(::grpc::ClientContext* context, const ::masterworker::workerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::workerJob>::Create(channel_.get(), cq, rpcmethod_getJob_, context, request, false);
}

master::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      master_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< master::Service, ::masterworker::workerInfo, ::masterworker::workerJob>(
          [](master::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::masterworker::workerInfo* req,
             ::masterworker::workerJob* resp) {
               return service->getJob(ctx, req, resp);
             }, this)));
}

master::Service::~Service() {
}

::grpc::Status master::Service::getJob(::grpc::ServerContext* context, const ::masterworker::workerInfo* request, ::masterworker::workerJob* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* worker_method_names[] = {
  "/masterworker.worker/getHealth",
  "/masterworker.worker/getResults",
};

std::unique_ptr< worker::Stub> worker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< worker::Stub> stub(new worker::Stub(channel));
  return stub;
}

worker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getHealth_(worker_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getResults_(worker_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status worker::Stub::getHealth(::grpc::ClientContext* context, const ::masterworker::masterInfo& request, ::masterworker::workerStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getHealth_, context, request, response);
}

void worker::Stub::experimental_async::getHealth(::grpc::ClientContext* context, const ::masterworker::masterInfo* request, ::masterworker::workerStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getHealth_, context, request, response, std::move(f));
}

void worker::Stub::experimental_async::getHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::workerStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getHealth_, context, request, response, std::move(f));
}

void worker::Stub::experimental_async::getHealth(::grpc::ClientContext* context, const ::masterworker::masterInfo* request, ::masterworker::workerStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getHealth_, context, request, response, reactor);
}

void worker::Stub::experimental_async::getHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::workerStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::masterworker::workerStatus>* worker::Stub::AsyncgetHealthRaw(::grpc::ClientContext* context, const ::masterworker::masterInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::workerStatus>::Create(channel_.get(), cq, rpcmethod_getHealth_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::masterworker::workerStatus>* worker::Stub::PrepareAsyncgetHealthRaw(::grpc::ClientContext* context, const ::masterworker::masterInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::workerStatus>::Create(channel_.get(), cq, rpcmethod_getHealth_, context, request, false);
}

::grpc::Status worker::Stub::getResults(::grpc::ClientContext* context, const ::masterworker::masterInfo& request, ::masterworker::jobResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getResults_, context, request, response);
}

void worker::Stub::experimental_async::getResults(::grpc::ClientContext* context, const ::masterworker::masterInfo* request, ::masterworker::jobResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getResults_, context, request, response, std::move(f));
}

void worker::Stub::experimental_async::getResults(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::jobResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getResults_, context, request, response, std::move(f));
}

void worker::Stub::experimental_async::getResults(::grpc::ClientContext* context, const ::masterworker::masterInfo* request, ::masterworker::jobResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getResults_, context, request, response, reactor);
}

void worker::Stub::experimental_async::getResults(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::jobResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getResults_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::masterworker::jobResult>* worker::Stub::AsyncgetResultsRaw(::grpc::ClientContext* context, const ::masterworker::masterInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::jobResult>::Create(channel_.get(), cq, rpcmethod_getResults_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::masterworker::jobResult>* worker::Stub::PrepareAsyncgetResultsRaw(::grpc::ClientContext* context, const ::masterworker::masterInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::jobResult>::Create(channel_.get(), cq, rpcmethod_getResults_, context, request, false);
}

worker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      worker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< worker::Service, ::masterworker::masterInfo, ::masterworker::workerStatus>(
          [](worker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::masterworker::masterInfo* req,
             ::masterworker::workerStatus* resp) {
               return service->getHealth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      worker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< worker::Service, ::masterworker::masterInfo, ::masterworker::jobResult>(
          [](worker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::masterworker::masterInfo* req,
             ::masterworker::jobResult* resp) {
               return service->getResults(ctx, req, resp);
             }, this)));
}

worker::Service::~Service() {
}

::grpc::Status worker::Service::getHealth(::grpc::ServerContext* context, const ::masterworker::masterInfo* request, ::masterworker::workerStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status worker::Service::getResults(::grpc::ServerContext* context, const ::masterworker::masterInfo* request, ::masterworker::jobResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace masterworker

