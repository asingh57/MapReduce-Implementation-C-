// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#include "masterworker.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace masterworker {
class masterInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<masterInfo> _instance;
} _masterInfo_default_instance_;
class workerJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<workerJob> _instance;
} _workerJob_default_instance_;
class workerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<workerInfo> _instance;
} _workerInfo_default_instance_;
class workerStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<workerStatus> _instance;
} _workerStatus_default_instance_;
class jobResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<jobResult> _instance;
} _jobResult_default_instance_;
}  // namespace masterworker
static void InitDefaultsscc_info_jobResult_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_jobResult_default_instance_;
    new (ptr) ::masterworker::jobResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::masterworker::jobResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_jobResult_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_jobResult_masterworker_2eproto}, {}};

static void InitDefaultsscc_info_masterInfo_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_masterInfo_default_instance_;
    new (ptr) ::masterworker::masterInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::masterworker::masterInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_masterInfo_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_masterInfo_masterworker_2eproto}, {}};

static void InitDefaultsscc_info_workerInfo_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_workerInfo_default_instance_;
    new (ptr) ::masterworker::workerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::masterworker::workerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_workerInfo_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_workerInfo_masterworker_2eproto}, {}};

static void InitDefaultsscc_info_workerJob_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_workerJob_default_instance_;
    new (ptr) ::masterworker::workerJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::masterworker::workerJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_workerJob_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_workerJob_masterworker_2eproto}, {}};

static void InitDefaultsscc_info_workerStatus_masterworker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::masterworker::_workerStatus_default_instance_;
    new (ptr) ::masterworker::workerStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::masterworker::workerStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_workerStatus_masterworker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_workerStatus_masterworker_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_masterworker_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_masterworker_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_masterworker_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_masterworker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::masterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::masterInfo, ipaddress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::workerJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::workerJob, reducefileslist_),
  PROTOBUF_FIELD_OFFSET(::masterworker::workerJob, mapfilepath_),
  PROTOBUF_FIELD_OFFSET(::masterworker::workerJob, startidxmapper_),
  PROTOBUF_FIELD_OFFSET(::masterworker::workerJob, endidxmapper_),
  PROTOBUF_FIELD_OFFSET(::masterworker::workerJob, jobtype_),
  PROTOBUF_FIELD_OFFSET(::masterworker::workerJob, userid_),
  PROTOBUF_FIELD_OFFSET(::masterworker::workerJob, jobid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::workerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::workerInfo, workerip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::workerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::workerStatus, ishealthy_),
  PROTOBUF_FIELD_OFFSET(::masterworker::workerStatus, isdone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::masterworker::jobResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::masterworker::jobResult, outputpath_),
  PROTOBUF_FIELD_OFFSET(::masterworker::jobResult, jobid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::masterworker::masterInfo)},
  { 6, -1, sizeof(::masterworker::workerJob)},
  { 18, -1, sizeof(::masterworker::workerInfo)},
  { 24, -1, sizeof(::masterworker::workerStatus)},
  { 31, -1, sizeof(::masterworker::jobResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_masterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_workerJob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_workerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_workerStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::masterworker::_jobResult_default_instance_),
};

const char descriptor_table_protodef_masterworker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022masterworker.proto\022\014masterworker\"\037\n\nma"
  "sterInfo\022\021\n\tipAddress\030\001 \001(\t\"\344\001\n\tworkerJo"
  "b\022\027\n\017reduceFilesList\030\001 \003(\t\022\023\n\013mapFilePat"
  "h\030\002 \001(\t\022\026\n\016startIdxMapper\030\003 \001(\005\022\024\n\014endId"
  "xMapper\030\004 \001(\005\0224\n\007jobType\030\005 \001(\0162#.masterw"
  "orker.workerJob.jobTypeEnum\022\016\n\006userID\030\006 "
  "\001(\t\022\r\n\005jobID\030\007 \001(\005\"&\n\013jobTypeEnum\022\n\n\006MAP"
  "PER\020\000\022\013\n\007REDUCER\020\001\"\036\n\nworkerInfo\022\020\n\010work"
  "erip\030\001 \001(\t\"1\n\014workerStatus\022\021\n\tisHealthy\030"
  "\001 \001(\010\022\016\n\006isDone\030\002 \001(\010\".\n\tjobResult\022\022\n\nou"
  "tputPath\030\001 \001(\t\022\r\n\005jobID\030\002 \001(\0052G\n\006master\022"
  "=\n\006getJob\022\030.masterworker.workerInfo\032\027.ma"
  "sterworker.workerJob\"\0002\220\001\n\006worker\022C\n\tget"
  "Health\022\030.masterworker.masterInfo\032\032.maste"
  "rworker.workerStatus\"\000\022A\n\ngetResults\022\030.m"
  "asterworker.masterInfo\032\027.masterworker.jo"
  "bResult\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_masterworker_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_masterworker_2eproto_sccs[5] = {
  &scc_info_jobResult_masterworker_2eproto.base,
  &scc_info_masterInfo_masterworker_2eproto.base,
  &scc_info_workerInfo_masterworker_2eproto.base,
  &scc_info_workerJob_masterworker_2eproto.base,
  &scc_info_workerStatus_masterworker_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_masterworker_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterworker_2eproto = {
  false, false, descriptor_table_protodef_masterworker_2eproto, "masterworker.proto", 657,
  &descriptor_table_masterworker_2eproto_once, descriptor_table_masterworker_2eproto_sccs, descriptor_table_masterworker_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_masterworker_2eproto::offsets,
  file_level_metadata_masterworker_2eproto, 5, file_level_enum_descriptors_masterworker_2eproto, file_level_service_descriptors_masterworker_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_masterworker_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_masterworker_2eproto)), true);
namespace masterworker {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* workerJob_jobTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_masterworker_2eproto);
  return file_level_enum_descriptors_masterworker_2eproto[0];
}
bool workerJob_jobTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr workerJob_jobTypeEnum workerJob::MAPPER;
constexpr workerJob_jobTypeEnum workerJob::REDUCER;
constexpr workerJob_jobTypeEnum workerJob::jobTypeEnum_MIN;
constexpr workerJob_jobTypeEnum workerJob::jobTypeEnum_MAX;
constexpr int workerJob::jobTypeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void masterInfo::InitAsDefaultInstance() {
}
class masterInfo::_Internal {
 public:
};

masterInfo::masterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.masterInfo)
}
masterInfo::masterInfo(const masterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ipaddress().empty()) {
    ipaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ipaddress(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.masterInfo)
}

void masterInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_masterInfo_masterworker_2eproto.base);
  ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

masterInfo::~masterInfo() {
  // @@protoc_insertion_point(destructor:masterworker.masterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void masterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void masterInfo::ArenaDtor(void* object) {
  masterInfo* _this = reinterpret_cast< masterInfo* >(object);
  (void)_this;
}
void masterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void masterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const masterInfo& masterInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_masterInfo_masterworker_2eproto.base);
  return *internal_default_instance();
}


void masterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.masterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* masterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ipAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ipaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.masterInfo.ipAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* masterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.masterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ipAddress = 1;
  if (this->ipaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipaddress().data(), static_cast<int>(this->_internal_ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.masterInfo.ipAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ipaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.masterInfo)
  return target;
}

size_t masterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.masterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ipAddress = 1;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipaddress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void masterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.masterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const masterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<masterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.masterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.masterInfo)
    MergeFrom(*source);
  }
}

void masterInfo::MergeFrom(const masterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.masterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ipaddress().size() > 0) {
    _internal_set_ipaddress(from._internal_ipaddress());
  }
}

void masterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.masterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void masterInfo::CopyFrom(const masterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.masterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool masterInfo::IsInitialized() const {
  return true;
}

void masterInfo::InternalSwap(masterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ipaddress_.Swap(&other->ipaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata masterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void workerJob::InitAsDefaultInstance() {
}
class workerJob::_Internal {
 public:
};

workerJob::workerJob(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reducefileslist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.workerJob)
}
workerJob::workerJob(const workerJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reducefileslist_(from.reducefileslist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mapfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mapfilepath().empty()) {
    mapfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mapfilepath(),
      GetArena());
  }
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userid(),
      GetArena());
  }
  ::memcpy(&startidxmapper_, &from.startidxmapper_,
    static_cast<size_t>(reinterpret_cast<char*>(&jobid_) -
    reinterpret_cast<char*>(&startidxmapper_)) + sizeof(jobid_));
  // @@protoc_insertion_point(copy_constructor:masterworker.workerJob)
}

void workerJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_workerJob_masterworker_2eproto.base);
  mapfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&startidxmapper_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jobid_) -
      reinterpret_cast<char*>(&startidxmapper_)) + sizeof(jobid_));
}

workerJob::~workerJob() {
  // @@protoc_insertion_point(destructor:masterworker.workerJob)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void workerJob::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mapfilepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void workerJob::ArenaDtor(void* object) {
  workerJob* _this = reinterpret_cast< workerJob* >(object);
  (void)_this;
}
void workerJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void workerJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const workerJob& workerJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_workerJob_masterworker_2eproto.base);
  return *internal_default_instance();
}


void workerJob::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.workerJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reducefileslist_.Clear();
  mapfilepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&startidxmapper_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jobid_) -
      reinterpret_cast<char*>(&startidxmapper_)) + sizeof(jobid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* workerJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string reduceFilesList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reducefileslist();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.workerJob.reduceFilesList"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string mapFilePath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mapfilepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.workerJob.mapFilePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 startIdxMapper = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          startidxmapper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 endIdxMapper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          endidxmapper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .masterworker.workerJob.jobTypeEnum jobType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_jobtype(static_cast<::masterworker::workerJob_jobTypeEnum>(val));
        } else goto handle_unusual;
        continue;
      // string userID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.workerJob.userID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 jobID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          jobid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* workerJob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.workerJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string reduceFilesList = 1;
  for (int i = 0, n = this->_internal_reducefileslist_size(); i < n; i++) {
    const auto& s = this->_internal_reducefileslist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.workerJob.reduceFilesList");
    target = stream->WriteString(1, s, target);
  }

  // string mapFilePath = 2;
  if (this->mapfilepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapfilepath().data(), static_cast<int>(this->_internal_mapfilepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.workerJob.mapFilePath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mapfilepath(), target);
  }

  // int32 startIdxMapper = 3;
  if (this->startidxmapper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_startidxmapper(), target);
  }

  // int32 endIdxMapper = 4;
  if (this->endidxmapper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_endidxmapper(), target);
  }

  // .masterworker.workerJob.jobTypeEnum jobType = 5;
  if (this->jobtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_jobtype(), target);
  }

  // string userID = 6;
  if (this->userid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.workerJob.userID");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_userid(), target);
  }

  // int32 jobID = 7;
  if (this->jobid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_jobid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.workerJob)
  return target;
}

size_t workerJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.workerJob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reduceFilesList = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reducefileslist_.size());
  for (int i = 0, n = reducefileslist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reducefileslist_.Get(i));
  }

  // string mapFilePath = 2;
  if (this->mapfilepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapfilepath());
  }

  // string userID = 6;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // int32 startIdxMapper = 3;
  if (this->startidxmapper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_startidxmapper());
  }

  // int32 endIdxMapper = 4;
  if (this->endidxmapper() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endidxmapper());
  }

  // .masterworker.workerJob.jobTypeEnum jobType = 5;
  if (this->jobtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_jobtype());
  }

  // int32 jobID = 7;
  if (this->jobid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_jobid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void workerJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.workerJob)
  GOOGLE_DCHECK_NE(&from, this);
  const workerJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<workerJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.workerJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.workerJob)
    MergeFrom(*source);
  }
}

void workerJob::MergeFrom(const workerJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.workerJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reducefileslist_.MergeFrom(from.reducefileslist_);
  if (from.mapfilepath().size() > 0) {
    _internal_set_mapfilepath(from._internal_mapfilepath());
  }
  if (from.userid().size() > 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.startidxmapper() != 0) {
    _internal_set_startidxmapper(from._internal_startidxmapper());
  }
  if (from.endidxmapper() != 0) {
    _internal_set_endidxmapper(from._internal_endidxmapper());
  }
  if (from.jobtype() != 0) {
    _internal_set_jobtype(from._internal_jobtype());
  }
  if (from.jobid() != 0) {
    _internal_set_jobid(from._internal_jobid());
  }
}

void workerJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.workerJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void workerJob::CopyFrom(const workerJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.workerJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool workerJob::IsInitialized() const {
  return true;
}

void workerJob::InternalSwap(workerJob* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reducefileslist_.InternalSwap(&other->reducefileslist_);
  mapfilepath_.Swap(&other->mapfilepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(workerJob, jobid_)
      + sizeof(workerJob::jobid_)
      - PROTOBUF_FIELD_OFFSET(workerJob, startidxmapper_)>(
          reinterpret_cast<char*>(&startidxmapper_),
          reinterpret_cast<char*>(&other->startidxmapper_));
}

::PROTOBUF_NAMESPACE_ID::Metadata workerJob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void workerInfo::InitAsDefaultInstance() {
}
class workerInfo::_Internal {
 public:
};

workerInfo::workerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.workerInfo)
}
workerInfo::workerInfo(const workerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  workerip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workerip().empty()) {
    workerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_workerip(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:masterworker.workerInfo)
}

void workerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_workerInfo_masterworker_2eproto.base);
  workerip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

workerInfo::~workerInfo() {
  // @@protoc_insertion_point(destructor:masterworker.workerInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void workerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  workerip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void workerInfo::ArenaDtor(void* object) {
  workerInfo* _this = reinterpret_cast< workerInfo* >(object);
  (void)_this;
}
void workerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void workerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const workerInfo& workerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_workerInfo_masterworker_2eproto.base);
  return *internal_default_instance();
}


void workerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.workerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workerip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* workerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string workerip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_workerip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.workerInfo.workerip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* workerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.workerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string workerip = 1;
  if (this->workerip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workerip().data(), static_cast<int>(this->_internal_workerip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.workerInfo.workerip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_workerip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.workerInfo)
  return target;
}

size_t workerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.workerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string workerip = 1;
  if (this->workerip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workerip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void workerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.workerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const workerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<workerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.workerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.workerInfo)
    MergeFrom(*source);
  }
}

void workerInfo::MergeFrom(const workerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.workerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.workerip().size() > 0) {
    _internal_set_workerip(from._internal_workerip());
  }
}

void workerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.workerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void workerInfo::CopyFrom(const workerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.workerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool workerInfo::IsInitialized() const {
  return true;
}

void workerInfo::InternalSwap(workerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  workerip_.Swap(&other->workerip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata workerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void workerStatus::InitAsDefaultInstance() {
}
class workerStatus::_Internal {
 public:
};

workerStatus::workerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.workerStatus)
}
workerStatus::workerStatus(const workerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ishealthy_, &from.ishealthy_,
    static_cast<size_t>(reinterpret_cast<char*>(&isdone_) -
    reinterpret_cast<char*>(&ishealthy_)) + sizeof(isdone_));
  // @@protoc_insertion_point(copy_constructor:masterworker.workerStatus)
}

void workerStatus::SharedCtor() {
  ::memset(&ishealthy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdone_) -
      reinterpret_cast<char*>(&ishealthy_)) + sizeof(isdone_));
}

workerStatus::~workerStatus() {
  // @@protoc_insertion_point(destructor:masterworker.workerStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void workerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void workerStatus::ArenaDtor(void* object) {
  workerStatus* _this = reinterpret_cast< workerStatus* >(object);
  (void)_this;
}
void workerStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void workerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const workerStatus& workerStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_workerStatus_masterworker_2eproto.base);
  return *internal_default_instance();
}


void workerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.workerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ishealthy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isdone_) -
      reinterpret_cast<char*>(&ishealthy_)) + sizeof(isdone_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* workerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isHealthy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ishealthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isDone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isdone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* workerStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.workerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isHealthy = 1;
  if (this->ishealthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ishealthy(), target);
  }

  // bool isDone = 2;
  if (this->isdone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isdone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.workerStatus)
  return target;
}

size_t workerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.workerStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isHealthy = 1;
  if (this->ishealthy() != 0) {
    total_size += 1 + 1;
  }

  // bool isDone = 2;
  if (this->isdone() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void workerStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.workerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const workerStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<workerStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.workerStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.workerStatus)
    MergeFrom(*source);
  }
}

void workerStatus::MergeFrom(const workerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.workerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ishealthy() != 0) {
    _internal_set_ishealthy(from._internal_ishealthy());
  }
  if (from.isdone() != 0) {
    _internal_set_isdone(from._internal_isdone());
  }
}

void workerStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.workerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void workerStatus::CopyFrom(const workerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.workerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool workerStatus::IsInitialized() const {
  return true;
}

void workerStatus::InternalSwap(workerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(workerStatus, isdone_)
      + sizeof(workerStatus::isdone_)
      - PROTOBUF_FIELD_OFFSET(workerStatus, ishealthy_)>(
          reinterpret_cast<char*>(&ishealthy_),
          reinterpret_cast<char*>(&other->ishealthy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata workerStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void jobResult::InitAsDefaultInstance() {
}
class jobResult::_Internal {
 public:
};

jobResult::jobResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:masterworker.jobResult)
}
jobResult::jobResult(const jobResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  outputpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outputpath().empty()) {
    outputpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_outputpath(),
      GetArena());
  }
  jobid_ = from.jobid_;
  // @@protoc_insertion_point(copy_constructor:masterworker.jobResult)
}

void jobResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_jobResult_masterworker_2eproto.base);
  outputpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jobid_ = 0;
}

jobResult::~jobResult() {
  // @@protoc_insertion_point(destructor:masterworker.jobResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void jobResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  outputpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void jobResult::ArenaDtor(void* object) {
  jobResult* _this = reinterpret_cast< jobResult* >(object);
  (void)_this;
}
void jobResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void jobResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const jobResult& jobResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_jobResult_masterworker_2eproto.base);
  return *internal_default_instance();
}


void jobResult::Clear() {
// @@protoc_insertion_point(message_clear_start:masterworker.jobResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jobid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* jobResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string outputPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_outputpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "masterworker.jobResult.outputPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 jobID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          jobid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* jobResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:masterworker.jobResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string outputPath = 1;
  if (this->outputpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outputpath().data(), static_cast<int>(this->_internal_outputpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "masterworker.jobResult.outputPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_outputpath(), target);
  }

  // int32 jobID = 2;
  if (this->jobid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_jobid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:masterworker.jobResult)
  return target;
}

size_t jobResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:masterworker.jobResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string outputPath = 1;
  if (this->outputpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outputpath());
  }

  // int32 jobID = 2;
  if (this->jobid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_jobid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void jobResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:masterworker.jobResult)
  GOOGLE_DCHECK_NE(&from, this);
  const jobResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<jobResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:masterworker.jobResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:masterworker.jobResult)
    MergeFrom(*source);
  }
}

void jobResult::MergeFrom(const jobResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:masterworker.jobResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.outputpath().size() > 0) {
    _internal_set_outputpath(from._internal_outputpath());
  }
  if (from.jobid() != 0) {
    _internal_set_jobid(from._internal_jobid());
  }
}

void jobResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:masterworker.jobResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void jobResult::CopyFrom(const jobResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:masterworker.jobResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool jobResult::IsInitialized() const {
  return true;
}

void jobResult::InternalSwap(jobResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  outputpath_.Swap(&other->outputpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(jobid_, other->jobid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata jobResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::masterworker::masterInfo* Arena::CreateMaybeMessage< ::masterworker::masterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::masterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::workerJob* Arena::CreateMaybeMessage< ::masterworker::workerJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::workerJob >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::workerInfo* Arena::CreateMaybeMessage< ::masterworker::workerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::workerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::workerStatus* Arena::CreateMaybeMessage< ::masterworker::workerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::workerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::masterworker::jobResult* Arena::CreateMaybeMessage< ::masterworker::jobResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::masterworker::jobResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
