// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterworker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterworker_2eproto;
namespace masterworker {
class jobResultsInfo;
class jobResultsInfoDefaultTypeInternal;
extern jobResultsInfoDefaultTypeInternal _jobResultsInfo_default_instance_;
class keyValuePair;
class keyValuePairDefaultTypeInternal;
extern keyValuePairDefaultTypeInternal _keyValuePair_default_instance_;
class masterInfo;
class masterInfoDefaultTypeInternal;
extern masterInfoDefaultTypeInternal _masterInfo_default_instance_;
class reducerKeyValue;
class reducerKeyValueDefaultTypeInternal;
extern reducerKeyValueDefaultTypeInternal _reducerKeyValue_default_instance_;
class workerInfo;
class workerInfoDefaultTypeInternal;
extern workerInfoDefaultTypeInternal _workerInfo_default_instance_;
class workerJob;
class workerJobDefaultTypeInternal;
extern workerJobDefaultTypeInternal _workerJob_default_instance_;
class workerStatus;
class workerStatusDefaultTypeInternal;
extern workerStatusDefaultTypeInternal _workerStatus_default_instance_;
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> ::masterworker::jobResultsInfo* Arena::CreateMaybeMessage<::masterworker::jobResultsInfo>(Arena*);
template<> ::masterworker::keyValuePair* Arena::CreateMaybeMessage<::masterworker::keyValuePair>(Arena*);
template<> ::masterworker::masterInfo* Arena::CreateMaybeMessage<::masterworker::masterInfo>(Arena*);
template<> ::masterworker::reducerKeyValue* Arena::CreateMaybeMessage<::masterworker::reducerKeyValue>(Arena*);
template<> ::masterworker::workerInfo* Arena::CreateMaybeMessage<::masterworker::workerInfo>(Arena*);
template<> ::masterworker::workerJob* Arena::CreateMaybeMessage<::masterworker::workerJob>(Arena*);
template<> ::masterworker::workerStatus* Arena::CreateMaybeMessage<::masterworker::workerStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace masterworker {

enum workerJob_jobTypeEnum : int {
  workerJob_jobTypeEnum_MAPPER = 0,
  workerJob_jobTypeEnum_REDUCER = 1,
  workerJob_jobTypeEnum_workerJob_jobTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  workerJob_jobTypeEnum_workerJob_jobTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool workerJob_jobTypeEnum_IsValid(int value);
constexpr workerJob_jobTypeEnum workerJob_jobTypeEnum_jobTypeEnum_MIN = workerJob_jobTypeEnum_MAPPER;
constexpr workerJob_jobTypeEnum workerJob_jobTypeEnum_jobTypeEnum_MAX = workerJob_jobTypeEnum_REDUCER;
constexpr int workerJob_jobTypeEnum_jobTypeEnum_ARRAYSIZE = workerJob_jobTypeEnum_jobTypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* workerJob_jobTypeEnum_descriptor();
template<typename T>
inline const std::string& workerJob_jobTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, workerJob_jobTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function workerJob_jobTypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    workerJob_jobTypeEnum_descriptor(), enum_t_value);
}
inline bool workerJob_jobTypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, workerJob_jobTypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<workerJob_jobTypeEnum>(
    workerJob_jobTypeEnum_descriptor(), name, value);
}
// ===================================================================

class keyValuePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.keyValuePair) */ {
 public:
  inline keyValuePair() : keyValuePair(nullptr) {}
  virtual ~keyValuePair();

  keyValuePair(const keyValuePair& from);
  keyValuePair(keyValuePair&& from) noexcept
    : keyValuePair() {
    *this = ::std::move(from);
  }

  inline keyValuePair& operator=(const keyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline keyValuePair& operator=(keyValuePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const keyValuePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const keyValuePair* internal_default_instance() {
    return reinterpret_cast<const keyValuePair*>(
               &_keyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(keyValuePair& a, keyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(keyValuePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(keyValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline keyValuePair* New() const final {
    return CreateMaybeMessage<keyValuePair>(nullptr);
  }

  keyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<keyValuePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const keyValuePair& from);
  void MergeFrom(const keyValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(keyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.keyValuePair";
  }
  protected:
  explicit keyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.keyValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class jobResultsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.jobResultsInfo) */ {
 public:
  inline jobResultsInfo() : jobResultsInfo(nullptr) {}
  virtual ~jobResultsInfo();

  jobResultsInfo(const jobResultsInfo& from);
  jobResultsInfo(jobResultsInfo&& from) noexcept
    : jobResultsInfo() {
    *this = ::std::move(from);
  }

  inline jobResultsInfo& operator=(const jobResultsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline jobResultsInfo& operator=(jobResultsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const jobResultsInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const jobResultsInfo* internal_default_instance() {
    return reinterpret_cast<const jobResultsInfo*>(
               &_jobResultsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(jobResultsInfo& a, jobResultsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(jobResultsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(jobResultsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline jobResultsInfo* New() const final {
    return CreateMaybeMessage<jobResultsInfo>(nullptr);
  }

  jobResultsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<jobResultsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const jobResultsInfo& from);
  void MergeFrom(const jobResultsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(jobResultsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.jobResultsInfo";
  }
  protected:
  explicit jobResultsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysAndValuesFieldNumber = 2,
    kInitialJobFieldNumber = 1,
  };
  // repeated .masterworker.keyValuePair keysAndValues = 2;
  int keysandvalues_size() const;
  private:
  int _internal_keysandvalues_size() const;
  public:
  void clear_keysandvalues();
  ::masterworker::keyValuePair* mutable_keysandvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::keyValuePair >*
      mutable_keysandvalues();
  private:
  const ::masterworker::keyValuePair& _internal_keysandvalues(int index) const;
  ::masterworker::keyValuePair* _internal_add_keysandvalues();
  public:
  const ::masterworker::keyValuePair& keysandvalues(int index) const;
  ::masterworker::keyValuePair* add_keysandvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::keyValuePair >&
      keysandvalues() const;

  // .masterworker.workerJob initialJob = 1;
  bool has_initialjob() const;
  private:
  bool _internal_has_initialjob() const;
  public:
  void clear_initialjob();
  const ::masterworker::workerJob& initialjob() const;
  ::masterworker::workerJob* release_initialjob();
  ::masterworker::workerJob* mutable_initialjob();
  void set_allocated_initialjob(::masterworker::workerJob* initialjob);
  private:
  const ::masterworker::workerJob& _internal_initialjob() const;
  ::masterworker::workerJob* _internal_mutable_initialjob();
  public:
  void unsafe_arena_set_allocated_initialjob(
      ::masterworker::workerJob* initialjob);
  ::masterworker::workerJob* unsafe_arena_release_initialjob();

  // @@protoc_insertion_point(class_scope:masterworker.jobResultsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::keyValuePair > keysandvalues_;
  ::masterworker::workerJob* initialjob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class masterInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.masterInfo) */ {
 public:
  inline masterInfo() : masterInfo(nullptr) {}
  virtual ~masterInfo();

  masterInfo(const masterInfo& from);
  masterInfo(masterInfo&& from) noexcept
    : masterInfo() {
    *this = ::std::move(from);
  }

  inline masterInfo& operator=(const masterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline masterInfo& operator=(masterInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const masterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const masterInfo* internal_default_instance() {
    return reinterpret_cast<const masterInfo*>(
               &_masterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(masterInfo& a, masterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(masterInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(masterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline masterInfo* New() const final {
    return CreateMaybeMessage<masterInfo>(nullptr);
  }

  masterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<masterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const masterInfo& from);
  void MergeFrom(const masterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(masterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.masterInfo";
  }
  protected:
  explicit masterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
  };
  // string ipAddress = 1;
  void clear_ipaddress();
  const std::string& ipaddress() const;
  void set_ipaddress(const std::string& value);
  void set_ipaddress(std::string&& value);
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  std::string* mutable_ipaddress();
  std::string* release_ipaddress();
  void set_allocated_ipaddress(std::string* ipaddress);
  private:
  const std::string& _internal_ipaddress() const;
  void _internal_set_ipaddress(const std::string& value);
  std::string* _internal_mutable_ipaddress();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.masterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipaddress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class reducerKeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.reducerKeyValue) */ {
 public:
  inline reducerKeyValue() : reducerKeyValue(nullptr) {}
  virtual ~reducerKeyValue();

  reducerKeyValue(const reducerKeyValue& from);
  reducerKeyValue(reducerKeyValue&& from) noexcept
    : reducerKeyValue() {
    *this = ::std::move(from);
  }

  inline reducerKeyValue& operator=(const reducerKeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline reducerKeyValue& operator=(reducerKeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const reducerKeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const reducerKeyValue* internal_default_instance() {
    return reinterpret_cast<const reducerKeyValue*>(
               &_reducerKeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(reducerKeyValue& a, reducerKeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(reducerKeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reducerKeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline reducerKeyValue* New() const final {
    return CreateMaybeMessage<reducerKeyValue>(nullptr);
  }

  reducerKeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<reducerKeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const reducerKeyValue& from);
  void MergeFrom(const reducerKeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reducerKeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.reducerKeyValue";
  }
  protected:
  explicit reducerKeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesPathListFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated string filesPathList = 2;
  int filespathlist_size() const;
  private:
  int _internal_filespathlist_size() const;
  public:
  void clear_filespathlist();
  const std::string& filespathlist(int index) const;
  std::string* mutable_filespathlist(int index);
  void set_filespathlist(int index, const std::string& value);
  void set_filespathlist(int index, std::string&& value);
  void set_filespathlist(int index, const char* value);
  void set_filespathlist(int index, const char* value, size_t size);
  std::string* add_filespathlist();
  void add_filespathlist(const std::string& value);
  void add_filespathlist(std::string&& value);
  void add_filespathlist(const char* value);
  void add_filespathlist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filespathlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filespathlist();
  private:
  const std::string& _internal_filespathlist(int index) const;
  std::string* _internal_add_filespathlist();
  public:

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.reducerKeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filespathlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class workerJob PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.workerJob) */ {
 public:
  inline workerJob() : workerJob(nullptr) {}
  virtual ~workerJob();

  workerJob(const workerJob& from);
  workerJob(workerJob&& from) noexcept
    : workerJob() {
    *this = ::std::move(from);
  }

  inline workerJob& operator=(const workerJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline workerJob& operator=(workerJob&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const workerJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const workerJob* internal_default_instance() {
    return reinterpret_cast<const workerJob*>(
               &_workerJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(workerJob& a, workerJob& b) {
    a.Swap(&b);
  }
  inline void Swap(workerJob* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(workerJob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline workerJob* New() const final {
    return CreateMaybeMessage<workerJob>(nullptr);
  }

  workerJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<workerJob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const workerJob& from);
  void MergeFrom(const workerJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(workerJob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.workerJob";
  }
  protected:
  explicit workerJob(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef workerJob_jobTypeEnum jobTypeEnum;
  static constexpr jobTypeEnum MAPPER =
    workerJob_jobTypeEnum_MAPPER;
  static constexpr jobTypeEnum REDUCER =
    workerJob_jobTypeEnum_REDUCER;
  static inline bool jobTypeEnum_IsValid(int value) {
    return workerJob_jobTypeEnum_IsValid(value);
  }
  static constexpr jobTypeEnum jobTypeEnum_MIN =
    workerJob_jobTypeEnum_jobTypeEnum_MIN;
  static constexpr jobTypeEnum jobTypeEnum_MAX =
    workerJob_jobTypeEnum_jobTypeEnum_MAX;
  static constexpr int jobTypeEnum_ARRAYSIZE =
    workerJob_jobTypeEnum_jobTypeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  jobTypeEnum_descriptor() {
    return workerJob_jobTypeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& jobTypeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, jobTypeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function jobTypeEnum_Name.");
    return workerJob_jobTypeEnum_Name(enum_t_value);
  }
  static inline bool jobTypeEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      jobTypeEnum* value) {
    return workerJob_jobTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMapFilePathFieldNumber = 2,
    kUserIDFieldNumber = 6,
    kReducerInfoFieldNumber = 1,
    kStartIdxMapperFieldNumber = 3,
    kEndIdxMapperFieldNumber = 4,
    kJobTypeFieldNumber = 5,
    kJobIDFieldNumber = 7,
  };
  // string mapFilePath = 2;
  void clear_mapfilepath();
  const std::string& mapfilepath() const;
  void set_mapfilepath(const std::string& value);
  void set_mapfilepath(std::string&& value);
  void set_mapfilepath(const char* value);
  void set_mapfilepath(const char* value, size_t size);
  std::string* mutable_mapfilepath();
  std::string* release_mapfilepath();
  void set_allocated_mapfilepath(std::string* mapfilepath);
  private:
  const std::string& _internal_mapfilepath() const;
  void _internal_set_mapfilepath(const std::string& value);
  std::string* _internal_mutable_mapfilepath();
  public:

  // string userID = 6;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // .masterworker.reducerKeyValue reducerInfo = 1;
  bool has_reducerinfo() const;
  private:
  bool _internal_has_reducerinfo() const;
  public:
  void clear_reducerinfo();
  const ::masterworker::reducerKeyValue& reducerinfo() const;
  ::masterworker::reducerKeyValue* release_reducerinfo();
  ::masterworker::reducerKeyValue* mutable_reducerinfo();
  void set_allocated_reducerinfo(::masterworker::reducerKeyValue* reducerinfo);
  private:
  const ::masterworker::reducerKeyValue& _internal_reducerinfo() const;
  ::masterworker::reducerKeyValue* _internal_mutable_reducerinfo();
  public:
  void unsafe_arena_set_allocated_reducerinfo(
      ::masterworker::reducerKeyValue* reducerinfo);
  ::masterworker::reducerKeyValue* unsafe_arena_release_reducerinfo();

  // int32 startIdxMapper = 3;
  void clear_startidxmapper();
  ::PROTOBUF_NAMESPACE_ID::int32 startidxmapper() const;
  void set_startidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startidxmapper() const;
  void _internal_set_startidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 endIdxMapper = 4;
  void clear_endidxmapper();
  ::PROTOBUF_NAMESPACE_ID::int32 endidxmapper() const;
  void set_endidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endidxmapper() const;
  void _internal_set_endidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .masterworker.workerJob.jobTypeEnum jobType = 5;
  void clear_jobtype();
  ::masterworker::workerJob_jobTypeEnum jobtype() const;
  void set_jobtype(::masterworker::workerJob_jobTypeEnum value);
  private:
  ::masterworker::workerJob_jobTypeEnum _internal_jobtype() const;
  void _internal_set_jobtype(::masterworker::workerJob_jobTypeEnum value);
  public:

  // int32 jobID = 7;
  void clear_jobid();
  ::PROTOBUF_NAMESPACE_ID::int32 jobid() const;
  void set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jobid() const;
  void _internal_set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.workerJob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapfilepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::masterworker::reducerKeyValue* reducerinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 startidxmapper_;
  ::PROTOBUF_NAMESPACE_ID::int32 endidxmapper_;
  int jobtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 jobid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class workerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.workerInfo) */ {
 public:
  inline workerInfo() : workerInfo(nullptr) {}
  virtual ~workerInfo();

  workerInfo(const workerInfo& from);
  workerInfo(workerInfo&& from) noexcept
    : workerInfo() {
    *this = ::std::move(from);
  }

  inline workerInfo& operator=(const workerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline workerInfo& operator=(workerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const workerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const workerInfo* internal_default_instance() {
    return reinterpret_cast<const workerInfo*>(
               &_workerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(workerInfo& a, workerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(workerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(workerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline workerInfo* New() const final {
    return CreateMaybeMessage<workerInfo>(nullptr);
  }

  workerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<workerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const workerInfo& from);
  void MergeFrom(const workerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(workerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.workerInfo";
  }
  protected:
  explicit workerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkeripFieldNumber = 1,
  };
  // string workerip = 1;
  void clear_workerip();
  const std::string& workerip() const;
  void set_workerip(const std::string& value);
  void set_workerip(std::string&& value);
  void set_workerip(const char* value);
  void set_workerip(const char* value, size_t size);
  std::string* mutable_workerip();
  std::string* release_workerip();
  void set_allocated_workerip(std::string* workerip);
  private:
  const std::string& _internal_workerip() const;
  void _internal_set_workerip(const std::string& value);
  std::string* _internal_mutable_workerip();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.workerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workerip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class workerStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.workerStatus) */ {
 public:
  inline workerStatus() : workerStatus(nullptr) {}
  virtual ~workerStatus();

  workerStatus(const workerStatus& from);
  workerStatus(workerStatus&& from) noexcept
    : workerStatus() {
    *this = ::std::move(from);
  }

  inline workerStatus& operator=(const workerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline workerStatus& operator=(workerStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const workerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const workerStatus* internal_default_instance() {
    return reinterpret_cast<const workerStatus*>(
               &_workerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(workerStatus& a, workerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(workerStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(workerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline workerStatus* New() const final {
    return CreateMaybeMessage<workerStatus>(nullptr);
  }

  workerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<workerStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const workerStatus& from);
  void MergeFrom(const workerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(workerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.workerStatus";
  }
  protected:
  explicit workerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsHealthyFieldNumber = 1,
  };
  // bool isHealthy = 1;
  void clear_ishealthy();
  bool ishealthy() const;
  void set_ishealthy(bool value);
  private:
  bool _internal_ishealthy() const;
  void _internal_set_ishealthy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.workerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ishealthy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// keyValuePair

// string key = 1;
inline void keyValuePair::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& keyValuePair::key() const {
  // @@protoc_insertion_point(field_get:masterworker.keyValuePair.key)
  return _internal_key();
}
inline void keyValuePair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:masterworker.keyValuePair.key)
}
inline std::string* keyValuePair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:masterworker.keyValuePair.key)
  return _internal_mutable_key();
}
inline const std::string& keyValuePair::_internal_key() const {
  return key_.Get();
}
inline void keyValuePair::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void keyValuePair::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.keyValuePair.key)
}
inline void keyValuePair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.keyValuePair.key)
}
inline void keyValuePair::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.keyValuePair.key)
}
inline std::string* keyValuePair::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* keyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:masterworker.keyValuePair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void keyValuePair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.keyValuePair.key)
}

// string value = 2;
inline void keyValuePair::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& keyValuePair::value() const {
  // @@protoc_insertion_point(field_get:masterworker.keyValuePair.value)
  return _internal_value();
}
inline void keyValuePair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:masterworker.keyValuePair.value)
}
inline std::string* keyValuePair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:masterworker.keyValuePair.value)
  return _internal_mutable_value();
}
inline const std::string& keyValuePair::_internal_value() const {
  return value_.Get();
}
inline void keyValuePair::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void keyValuePair::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.keyValuePair.value)
}
inline void keyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.keyValuePair.value)
}
inline void keyValuePair::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.keyValuePair.value)
}
inline std::string* keyValuePair::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* keyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:masterworker.keyValuePair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void keyValuePair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.keyValuePair.value)
}

// -------------------------------------------------------------------

// jobResultsInfo

// .masterworker.workerJob initialJob = 1;
inline bool jobResultsInfo::_internal_has_initialjob() const {
  return this != internal_default_instance() && initialjob_ != nullptr;
}
inline bool jobResultsInfo::has_initialjob() const {
  return _internal_has_initialjob();
}
inline void jobResultsInfo::clear_initialjob() {
  if (GetArena() == nullptr && initialjob_ != nullptr) {
    delete initialjob_;
  }
  initialjob_ = nullptr;
}
inline const ::masterworker::workerJob& jobResultsInfo::_internal_initialjob() const {
  const ::masterworker::workerJob* p = initialjob_;
  return p != nullptr ? *p : *reinterpret_cast<const ::masterworker::workerJob*>(
      &::masterworker::_workerJob_default_instance_);
}
inline const ::masterworker::workerJob& jobResultsInfo::initialjob() const {
  // @@protoc_insertion_point(field_get:masterworker.jobResultsInfo.initialJob)
  return _internal_initialjob();
}
inline void jobResultsInfo::unsafe_arena_set_allocated_initialjob(
    ::masterworker::workerJob* initialjob) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initialjob_);
  }
  initialjob_ = initialjob;
  if (initialjob) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.jobResultsInfo.initialJob)
}
inline ::masterworker::workerJob* jobResultsInfo::release_initialjob() {
  
  ::masterworker::workerJob* temp = initialjob_;
  initialjob_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::masterworker::workerJob* jobResultsInfo::unsafe_arena_release_initialjob() {
  // @@protoc_insertion_point(field_release:masterworker.jobResultsInfo.initialJob)
  
  ::masterworker::workerJob* temp = initialjob_;
  initialjob_ = nullptr;
  return temp;
}
inline ::masterworker::workerJob* jobResultsInfo::_internal_mutable_initialjob() {
  
  if (initialjob_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::workerJob>(GetArena());
    initialjob_ = p;
  }
  return initialjob_;
}
inline ::masterworker::workerJob* jobResultsInfo::mutable_initialjob() {
  // @@protoc_insertion_point(field_mutable:masterworker.jobResultsInfo.initialJob)
  return _internal_mutable_initialjob();
}
inline void jobResultsInfo::set_allocated_initialjob(::masterworker::workerJob* initialjob) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete initialjob_;
  }
  if (initialjob) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initialjob);
    if (message_arena != submessage_arena) {
      initialjob = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initialjob, submessage_arena);
    }
    
  } else {
    
  }
  initialjob_ = initialjob;
  // @@protoc_insertion_point(field_set_allocated:masterworker.jobResultsInfo.initialJob)
}

// repeated .masterworker.keyValuePair keysAndValues = 2;
inline int jobResultsInfo::_internal_keysandvalues_size() const {
  return keysandvalues_.size();
}
inline int jobResultsInfo::keysandvalues_size() const {
  return _internal_keysandvalues_size();
}
inline void jobResultsInfo::clear_keysandvalues() {
  keysandvalues_.Clear();
}
inline ::masterworker::keyValuePair* jobResultsInfo::mutable_keysandvalues(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.jobResultsInfo.keysAndValues)
  return keysandvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::keyValuePair >*
jobResultsInfo::mutable_keysandvalues() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.jobResultsInfo.keysAndValues)
  return &keysandvalues_;
}
inline const ::masterworker::keyValuePair& jobResultsInfo::_internal_keysandvalues(int index) const {
  return keysandvalues_.Get(index);
}
inline const ::masterworker::keyValuePair& jobResultsInfo::keysandvalues(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.jobResultsInfo.keysAndValues)
  return _internal_keysandvalues(index);
}
inline ::masterworker::keyValuePair* jobResultsInfo::_internal_add_keysandvalues() {
  return keysandvalues_.Add();
}
inline ::masterworker::keyValuePair* jobResultsInfo::add_keysandvalues() {
  // @@protoc_insertion_point(field_add:masterworker.jobResultsInfo.keysAndValues)
  return _internal_add_keysandvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::masterworker::keyValuePair >&
jobResultsInfo::keysandvalues() const {
  // @@protoc_insertion_point(field_list:masterworker.jobResultsInfo.keysAndValues)
  return keysandvalues_;
}

// -------------------------------------------------------------------

// masterInfo

// string ipAddress = 1;
inline void masterInfo::clear_ipaddress() {
  ipaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& masterInfo::ipaddress() const {
  // @@protoc_insertion_point(field_get:masterworker.masterInfo.ipAddress)
  return _internal_ipaddress();
}
inline void masterInfo::set_ipaddress(const std::string& value) {
  _internal_set_ipaddress(value);
  // @@protoc_insertion_point(field_set:masterworker.masterInfo.ipAddress)
}
inline std::string* masterInfo::mutable_ipaddress() {
  // @@protoc_insertion_point(field_mutable:masterworker.masterInfo.ipAddress)
  return _internal_mutable_ipaddress();
}
inline const std::string& masterInfo::_internal_ipaddress() const {
  return ipaddress_.Get();
}
inline void masterInfo::_internal_set_ipaddress(const std::string& value) {
  
  ipaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void masterInfo::set_ipaddress(std::string&& value) {
  
  ipaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.masterInfo.ipAddress)
}
inline void masterInfo::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ipaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.masterInfo.ipAddress)
}
inline void masterInfo::set_ipaddress(const char* value,
    size_t size) {
  
  ipaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.masterInfo.ipAddress)
}
inline std::string* masterInfo::_internal_mutable_ipaddress() {
  
  return ipaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* masterInfo::release_ipaddress() {
  // @@protoc_insertion_point(field_release:masterworker.masterInfo.ipAddress)
  return ipaddress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void masterInfo::set_allocated_ipaddress(std::string* ipaddress) {
  if (ipaddress != nullptr) {
    
  } else {
    
  }
  ipaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.masterInfo.ipAddress)
}

// -------------------------------------------------------------------

// reducerKeyValue

// string key = 1;
inline void reducerKeyValue::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& reducerKeyValue::key() const {
  // @@protoc_insertion_point(field_get:masterworker.reducerKeyValue.key)
  return _internal_key();
}
inline void reducerKeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:masterworker.reducerKeyValue.key)
}
inline std::string* reducerKeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:masterworker.reducerKeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& reducerKeyValue::_internal_key() const {
  return key_.Get();
}
inline void reducerKeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void reducerKeyValue::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.reducerKeyValue.key)
}
inline void reducerKeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.reducerKeyValue.key)
}
inline void reducerKeyValue::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.reducerKeyValue.key)
}
inline std::string* reducerKeyValue::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* reducerKeyValue::release_key() {
  // @@protoc_insertion_point(field_release:masterworker.reducerKeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void reducerKeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.reducerKeyValue.key)
}

// repeated string filesPathList = 2;
inline int reducerKeyValue::_internal_filespathlist_size() const {
  return filespathlist_.size();
}
inline int reducerKeyValue::filespathlist_size() const {
  return _internal_filespathlist_size();
}
inline void reducerKeyValue::clear_filespathlist() {
  filespathlist_.Clear();
}
inline std::string* reducerKeyValue::add_filespathlist() {
  // @@protoc_insertion_point(field_add_mutable:masterworker.reducerKeyValue.filesPathList)
  return _internal_add_filespathlist();
}
inline const std::string& reducerKeyValue::_internal_filespathlist(int index) const {
  return filespathlist_.Get(index);
}
inline const std::string& reducerKeyValue::filespathlist(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.reducerKeyValue.filesPathList)
  return _internal_filespathlist(index);
}
inline std::string* reducerKeyValue::mutable_filespathlist(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.reducerKeyValue.filesPathList)
  return filespathlist_.Mutable(index);
}
inline void reducerKeyValue::set_filespathlist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:masterworker.reducerKeyValue.filesPathList)
  filespathlist_.Mutable(index)->assign(value);
}
inline void reducerKeyValue::set_filespathlist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:masterworker.reducerKeyValue.filesPathList)
  filespathlist_.Mutable(index)->assign(std::move(value));
}
inline void reducerKeyValue::set_filespathlist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filespathlist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterworker.reducerKeyValue.filesPathList)
}
inline void reducerKeyValue::set_filespathlist(int index, const char* value, size_t size) {
  filespathlist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterworker.reducerKeyValue.filesPathList)
}
inline std::string* reducerKeyValue::_internal_add_filespathlist() {
  return filespathlist_.Add();
}
inline void reducerKeyValue::add_filespathlist(const std::string& value) {
  filespathlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterworker.reducerKeyValue.filesPathList)
}
inline void reducerKeyValue::add_filespathlist(std::string&& value) {
  filespathlist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:masterworker.reducerKeyValue.filesPathList)
}
inline void reducerKeyValue::add_filespathlist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filespathlist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterworker.reducerKeyValue.filesPathList)
}
inline void reducerKeyValue::add_filespathlist(const char* value, size_t size) {
  filespathlist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterworker.reducerKeyValue.filesPathList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
reducerKeyValue::filespathlist() const {
  // @@protoc_insertion_point(field_list:masterworker.reducerKeyValue.filesPathList)
  return filespathlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
reducerKeyValue::mutable_filespathlist() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.reducerKeyValue.filesPathList)
  return &filespathlist_;
}

// -------------------------------------------------------------------

// workerJob

// .masterworker.reducerKeyValue reducerInfo = 1;
inline bool workerJob::_internal_has_reducerinfo() const {
  return this != internal_default_instance() && reducerinfo_ != nullptr;
}
inline bool workerJob::has_reducerinfo() const {
  return _internal_has_reducerinfo();
}
inline void workerJob::clear_reducerinfo() {
  if (GetArena() == nullptr && reducerinfo_ != nullptr) {
    delete reducerinfo_;
  }
  reducerinfo_ = nullptr;
}
inline const ::masterworker::reducerKeyValue& workerJob::_internal_reducerinfo() const {
  const ::masterworker::reducerKeyValue* p = reducerinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::masterworker::reducerKeyValue*>(
      &::masterworker::_reducerKeyValue_default_instance_);
}
inline const ::masterworker::reducerKeyValue& workerJob::reducerinfo() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.reducerInfo)
  return _internal_reducerinfo();
}
inline void workerJob::unsafe_arena_set_allocated_reducerinfo(
    ::masterworker::reducerKeyValue* reducerinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reducerinfo_);
  }
  reducerinfo_ = reducerinfo;
  if (reducerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:masterworker.workerJob.reducerInfo)
}
inline ::masterworker::reducerKeyValue* workerJob::release_reducerinfo() {
  
  ::masterworker::reducerKeyValue* temp = reducerinfo_;
  reducerinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::masterworker::reducerKeyValue* workerJob::unsafe_arena_release_reducerinfo() {
  // @@protoc_insertion_point(field_release:masterworker.workerJob.reducerInfo)
  
  ::masterworker::reducerKeyValue* temp = reducerinfo_;
  reducerinfo_ = nullptr;
  return temp;
}
inline ::masterworker::reducerKeyValue* workerJob::_internal_mutable_reducerinfo() {
  
  if (reducerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::masterworker::reducerKeyValue>(GetArena());
    reducerinfo_ = p;
  }
  return reducerinfo_;
}
inline ::masterworker::reducerKeyValue* workerJob::mutable_reducerinfo() {
  // @@protoc_insertion_point(field_mutable:masterworker.workerJob.reducerInfo)
  return _internal_mutable_reducerinfo();
}
inline void workerJob::set_allocated_reducerinfo(::masterworker::reducerKeyValue* reducerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reducerinfo_;
  }
  if (reducerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reducerinfo);
    if (message_arena != submessage_arena) {
      reducerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reducerinfo, submessage_arena);
    }
    
  } else {
    
  }
  reducerinfo_ = reducerinfo;
  // @@protoc_insertion_point(field_set_allocated:masterworker.workerJob.reducerInfo)
}

// string mapFilePath = 2;
inline void workerJob::clear_mapfilepath() {
  mapfilepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& workerJob::mapfilepath() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.mapFilePath)
  return _internal_mapfilepath();
}
inline void workerJob::set_mapfilepath(const std::string& value) {
  _internal_set_mapfilepath(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.mapFilePath)
}
inline std::string* workerJob::mutable_mapfilepath() {
  // @@protoc_insertion_point(field_mutable:masterworker.workerJob.mapFilePath)
  return _internal_mutable_mapfilepath();
}
inline const std::string& workerJob::_internal_mapfilepath() const {
  return mapfilepath_.Get();
}
inline void workerJob::_internal_set_mapfilepath(const std::string& value) {
  
  mapfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void workerJob::set_mapfilepath(std::string&& value) {
  
  mapfilepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.workerJob.mapFilePath)
}
inline void workerJob::set_mapfilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mapfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.workerJob.mapFilePath)
}
inline void workerJob::set_mapfilepath(const char* value,
    size_t size) {
  
  mapfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.workerJob.mapFilePath)
}
inline std::string* workerJob::_internal_mutable_mapfilepath() {
  
  return mapfilepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* workerJob::release_mapfilepath() {
  // @@protoc_insertion_point(field_release:masterworker.workerJob.mapFilePath)
  return mapfilepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void workerJob::set_allocated_mapfilepath(std::string* mapfilepath) {
  if (mapfilepath != nullptr) {
    
  } else {
    
  }
  mapfilepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapfilepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.workerJob.mapFilePath)
}

// int32 startIdxMapper = 3;
inline void workerJob::clear_startidxmapper() {
  startidxmapper_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::_internal_startidxmapper() const {
  return startidxmapper_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::startidxmapper() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.startIdxMapper)
  return _internal_startidxmapper();
}
inline void workerJob::_internal_set_startidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startidxmapper_ = value;
}
inline void workerJob::set_startidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startidxmapper(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.startIdxMapper)
}

// int32 endIdxMapper = 4;
inline void workerJob::clear_endidxmapper() {
  endidxmapper_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::_internal_endidxmapper() const {
  return endidxmapper_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::endidxmapper() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.endIdxMapper)
  return _internal_endidxmapper();
}
inline void workerJob::_internal_set_endidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endidxmapper_ = value;
}
inline void workerJob::set_endidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endidxmapper(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.endIdxMapper)
}

// .masterworker.workerJob.jobTypeEnum jobType = 5;
inline void workerJob::clear_jobtype() {
  jobtype_ = 0;
}
inline ::masterworker::workerJob_jobTypeEnum workerJob::_internal_jobtype() const {
  return static_cast< ::masterworker::workerJob_jobTypeEnum >(jobtype_);
}
inline ::masterworker::workerJob_jobTypeEnum workerJob::jobtype() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.jobType)
  return _internal_jobtype();
}
inline void workerJob::_internal_set_jobtype(::masterworker::workerJob_jobTypeEnum value) {
  
  jobtype_ = value;
}
inline void workerJob::set_jobtype(::masterworker::workerJob_jobTypeEnum value) {
  _internal_set_jobtype(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.jobType)
}

// string userID = 6;
inline void workerJob::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& workerJob::userid() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.userID)
  return _internal_userid();
}
inline void workerJob::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.userID)
}
inline std::string* workerJob::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:masterworker.workerJob.userID)
  return _internal_mutable_userid();
}
inline const std::string& workerJob::_internal_userid() const {
  return userid_.Get();
}
inline void workerJob::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void workerJob::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.workerJob.userID)
}
inline void workerJob::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.workerJob.userID)
}
inline void workerJob::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.workerJob.userID)
}
inline std::string* workerJob::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* workerJob::release_userid() {
  // @@protoc_insertion_point(field_release:masterworker.workerJob.userID)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void workerJob::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.workerJob.userID)
}

// int32 jobID = 7;
inline void workerJob::clear_jobid() {
  jobid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::_internal_jobid() const {
  return jobid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::jobid() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.jobID)
  return _internal_jobid();
}
inline void workerJob::_internal_set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jobid_ = value;
}
inline void workerJob::set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jobid(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.jobID)
}

// -------------------------------------------------------------------

// workerInfo

// string workerip = 1;
inline void workerInfo::clear_workerip() {
  workerip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& workerInfo::workerip() const {
  // @@protoc_insertion_point(field_get:masterworker.workerInfo.workerip)
  return _internal_workerip();
}
inline void workerInfo::set_workerip(const std::string& value) {
  _internal_set_workerip(value);
  // @@protoc_insertion_point(field_set:masterworker.workerInfo.workerip)
}
inline std::string* workerInfo::mutable_workerip() {
  // @@protoc_insertion_point(field_mutable:masterworker.workerInfo.workerip)
  return _internal_mutable_workerip();
}
inline const std::string& workerInfo::_internal_workerip() const {
  return workerip_.Get();
}
inline void workerInfo::_internal_set_workerip(const std::string& value) {
  
  workerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void workerInfo::set_workerip(std::string&& value) {
  
  workerip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.workerInfo.workerip)
}
inline void workerInfo::set_workerip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.workerInfo.workerip)
}
inline void workerInfo::set_workerip(const char* value,
    size_t size) {
  
  workerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.workerInfo.workerip)
}
inline std::string* workerInfo::_internal_mutable_workerip() {
  
  return workerip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* workerInfo::release_workerip() {
  // @@protoc_insertion_point(field_release:masterworker.workerInfo.workerip)
  return workerip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void workerInfo::set_allocated_workerip(std::string* workerip) {
  if (workerip != nullptr) {
    
  } else {
    
  }
  workerip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workerip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.workerInfo.workerip)
}

// -------------------------------------------------------------------

// workerStatus

// bool isHealthy = 1;
inline void workerStatus::clear_ishealthy() {
  ishealthy_ = false;
}
inline bool workerStatus::_internal_ishealthy() const {
  return ishealthy_;
}
inline bool workerStatus::ishealthy() const {
  // @@protoc_insertion_point(field_get:masterworker.workerStatus.isHealthy)
  return _internal_ishealthy();
}
inline void workerStatus::_internal_set_ishealthy(bool value) {
  
  ishealthy_ = value;
}
inline void workerStatus::set_ishealthy(bool value) {
  _internal_set_ishealthy(value);
  // @@protoc_insertion_point(field_set:masterworker.workerStatus.isHealthy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterworker

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::masterworker::workerJob_jobTypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::masterworker::workerJob_jobTypeEnum>() {
  return ::masterworker::workerJob_jobTypeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
