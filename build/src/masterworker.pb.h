// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masterworker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_masterworker_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_masterworker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_masterworker_2eproto;
namespace masterworker {
class dummy;
class dummyDefaultTypeInternal;
extern dummyDefaultTypeInternal _dummy_default_instance_;
class jobResult;
class jobResultDefaultTypeInternal;
extern jobResultDefaultTypeInternal _jobResult_default_instance_;
class workerInfo;
class workerInfoDefaultTypeInternal;
extern workerInfoDefaultTypeInternal _workerInfo_default_instance_;
class workerJob;
class workerJobDefaultTypeInternal;
extern workerJobDefaultTypeInternal _workerJob_default_instance_;
class workerStatus;
class workerStatusDefaultTypeInternal;
extern workerStatusDefaultTypeInternal _workerStatus_default_instance_;
}  // namespace masterworker
PROTOBUF_NAMESPACE_OPEN
template<> ::masterworker::dummy* Arena::CreateMaybeMessage<::masterworker::dummy>(Arena*);
template<> ::masterworker::jobResult* Arena::CreateMaybeMessage<::masterworker::jobResult>(Arena*);
template<> ::masterworker::workerInfo* Arena::CreateMaybeMessage<::masterworker::workerInfo>(Arena*);
template<> ::masterworker::workerJob* Arena::CreateMaybeMessage<::masterworker::workerJob>(Arena*);
template<> ::masterworker::workerStatus* Arena::CreateMaybeMessage<::masterworker::workerStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace masterworker {

enum workerJob_jobTypeEnum : int {
  workerJob_jobTypeEnum_MAPPER = 0,
  workerJob_jobTypeEnum_REDUCER = 1,
  workerJob_jobTypeEnum_workerJob_jobTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  workerJob_jobTypeEnum_workerJob_jobTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool workerJob_jobTypeEnum_IsValid(int value);
constexpr workerJob_jobTypeEnum workerJob_jobTypeEnum_jobTypeEnum_MIN = workerJob_jobTypeEnum_MAPPER;
constexpr workerJob_jobTypeEnum workerJob_jobTypeEnum_jobTypeEnum_MAX = workerJob_jobTypeEnum_REDUCER;
constexpr int workerJob_jobTypeEnum_jobTypeEnum_ARRAYSIZE = workerJob_jobTypeEnum_jobTypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* workerJob_jobTypeEnum_descriptor();
template<typename T>
inline const std::string& workerJob_jobTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, workerJob_jobTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function workerJob_jobTypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    workerJob_jobTypeEnum_descriptor(), enum_t_value);
}
inline bool workerJob_jobTypeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, workerJob_jobTypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<workerJob_jobTypeEnum>(
    workerJob_jobTypeEnum_descriptor(), name, value);
}
// ===================================================================

class dummy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.dummy) */ {
 public:
  inline dummy() : dummy(nullptr) {}
  virtual ~dummy();

  dummy(const dummy& from);
  dummy(dummy&& from) noexcept
    : dummy() {
    *this = ::std::move(from);
  }

  inline dummy& operator=(const dummy& from) {
    CopyFrom(from);
    return *this;
  }
  inline dummy& operator=(dummy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const dummy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const dummy* internal_default_instance() {
    return reinterpret_cast<const dummy*>(
               &_dummy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(dummy& a, dummy& b) {
    a.Swap(&b);
  }
  inline void Swap(dummy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dummy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline dummy* New() const final {
    return CreateMaybeMessage<dummy>(nullptr);
  }

  dummy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<dummy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const dummy& from);
  void MergeFrom(const dummy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dummy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.dummy";
  }
  protected:
  explicit dummy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:masterworker.dummy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class workerJob PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.workerJob) */ {
 public:
  inline workerJob() : workerJob(nullptr) {}
  virtual ~workerJob();

  workerJob(const workerJob& from);
  workerJob(workerJob&& from) noexcept
    : workerJob() {
    *this = ::std::move(from);
  }

  inline workerJob& operator=(const workerJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline workerJob& operator=(workerJob&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const workerJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const workerJob* internal_default_instance() {
    return reinterpret_cast<const workerJob*>(
               &_workerJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(workerJob& a, workerJob& b) {
    a.Swap(&b);
  }
  inline void Swap(workerJob* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(workerJob* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline workerJob* New() const final {
    return CreateMaybeMessage<workerJob>(nullptr);
  }

  workerJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<workerJob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const workerJob& from);
  void MergeFrom(const workerJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(workerJob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.workerJob";
  }
  protected:
  explicit workerJob(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef workerJob_jobTypeEnum jobTypeEnum;
  static constexpr jobTypeEnum MAPPER =
    workerJob_jobTypeEnum_MAPPER;
  static constexpr jobTypeEnum REDUCER =
    workerJob_jobTypeEnum_REDUCER;
  static inline bool jobTypeEnum_IsValid(int value) {
    return workerJob_jobTypeEnum_IsValid(value);
  }
  static constexpr jobTypeEnum jobTypeEnum_MIN =
    workerJob_jobTypeEnum_jobTypeEnum_MIN;
  static constexpr jobTypeEnum jobTypeEnum_MAX =
    workerJob_jobTypeEnum_jobTypeEnum_MAX;
  static constexpr int jobTypeEnum_ARRAYSIZE =
    workerJob_jobTypeEnum_jobTypeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  jobTypeEnum_descriptor() {
    return workerJob_jobTypeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& jobTypeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, jobTypeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function jobTypeEnum_Name.");
    return workerJob_jobTypeEnum_Name(enum_t_value);
  }
  static inline bool jobTypeEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      jobTypeEnum* value) {
    return workerJob_jobTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReduceFilesListFieldNumber = 1,
    kMapFilePathFieldNumber = 2,
    kUserIDFieldNumber = 6,
    kStartIdxMapperFieldNumber = 3,
    kEndIdxMapperFieldNumber = 4,
    kJobTypeFieldNumber = 5,
    kJobIDFieldNumber = 7,
  };
  // repeated string reduceFilesList = 1;
  int reducefileslist_size() const;
  private:
  int _internal_reducefileslist_size() const;
  public:
  void clear_reducefileslist();
  const std::string& reducefileslist(int index) const;
  std::string* mutable_reducefileslist(int index);
  void set_reducefileslist(int index, const std::string& value);
  void set_reducefileslist(int index, std::string&& value);
  void set_reducefileslist(int index, const char* value);
  void set_reducefileslist(int index, const char* value, size_t size);
  std::string* add_reducefileslist();
  void add_reducefileslist(const std::string& value);
  void add_reducefileslist(std::string&& value);
  void add_reducefileslist(const char* value);
  void add_reducefileslist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reducefileslist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reducefileslist();
  private:
  const std::string& _internal_reducefileslist(int index) const;
  std::string* _internal_add_reducefileslist();
  public:

  // string mapFilePath = 2;
  void clear_mapfilepath();
  const std::string& mapfilepath() const;
  void set_mapfilepath(const std::string& value);
  void set_mapfilepath(std::string&& value);
  void set_mapfilepath(const char* value);
  void set_mapfilepath(const char* value, size_t size);
  std::string* mutable_mapfilepath();
  std::string* release_mapfilepath();
  void set_allocated_mapfilepath(std::string* mapfilepath);
  private:
  const std::string& _internal_mapfilepath() const;
  void _internal_set_mapfilepath(const std::string& value);
  std::string* _internal_mutable_mapfilepath();
  public:

  // string userID = 6;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // int32 startIdxMapper = 3;
  void clear_startidxmapper();
  ::PROTOBUF_NAMESPACE_ID::int32 startidxmapper() const;
  void set_startidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startidxmapper() const;
  void _internal_set_startidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 endIdxMapper = 4;
  void clear_endidxmapper();
  ::PROTOBUF_NAMESPACE_ID::int32 endidxmapper() const;
  void set_endidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endidxmapper() const;
  void _internal_set_endidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .masterworker.workerJob.jobTypeEnum jobType = 5;
  void clear_jobtype();
  ::masterworker::workerJob_jobTypeEnum jobtype() const;
  void set_jobtype(::masterworker::workerJob_jobTypeEnum value);
  private:
  ::masterworker::workerJob_jobTypeEnum _internal_jobtype() const;
  void _internal_set_jobtype(::masterworker::workerJob_jobTypeEnum value);
  public:

  // int32 jobID = 7;
  void clear_jobid();
  ::PROTOBUF_NAMESPACE_ID::int32 jobid() const;
  void set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jobid() const;
  void _internal_set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.workerJob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reducefileslist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mapfilepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 startidxmapper_;
  ::PROTOBUF_NAMESPACE_ID::int32 endidxmapper_;
  int jobtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 jobid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class workerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.workerInfo) */ {
 public:
  inline workerInfo() : workerInfo(nullptr) {}
  virtual ~workerInfo();

  workerInfo(const workerInfo& from);
  workerInfo(workerInfo&& from) noexcept
    : workerInfo() {
    *this = ::std::move(from);
  }

  inline workerInfo& operator=(const workerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline workerInfo& operator=(workerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const workerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const workerInfo* internal_default_instance() {
    return reinterpret_cast<const workerInfo*>(
               &_workerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(workerInfo& a, workerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(workerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(workerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline workerInfo* New() const final {
    return CreateMaybeMessage<workerInfo>(nullptr);
  }

  workerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<workerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const workerInfo& from);
  void MergeFrom(const workerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(workerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.workerInfo";
  }
  protected:
  explicit workerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkerIPFieldNumber = 1,
  };
  // string workerIP = 1;
  void clear_workerip();
  const std::string& workerip() const;
  void set_workerip(const std::string& value);
  void set_workerip(std::string&& value);
  void set_workerip(const char* value);
  void set_workerip(const char* value, size_t size);
  std::string* mutable_workerip();
  std::string* release_workerip();
  void set_allocated_workerip(std::string* workerip);
  private:
  const std::string& _internal_workerip() const;
  void _internal_set_workerip(const std::string& value);
  std::string* _internal_mutable_workerip();
  public:

  // @@protoc_insertion_point(class_scope:masterworker.workerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workerip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class workerStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.workerStatus) */ {
 public:
  inline workerStatus() : workerStatus(nullptr) {}
  virtual ~workerStatus();

  workerStatus(const workerStatus& from);
  workerStatus(workerStatus&& from) noexcept
    : workerStatus() {
    *this = ::std::move(from);
  }

  inline workerStatus& operator=(const workerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline workerStatus& operator=(workerStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const workerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const workerStatus* internal_default_instance() {
    return reinterpret_cast<const workerStatus*>(
               &_workerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(workerStatus& a, workerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(workerStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(workerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline workerStatus* New() const final {
    return CreateMaybeMessage<workerStatus>(nullptr);
  }

  workerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<workerStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const workerStatus& from);
  void MergeFrom(const workerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(workerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.workerStatus";
  }
  protected:
  explicit workerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsHealthyFieldNumber = 1,
    kIsDoneFieldNumber = 2,
  };
  // bool isHealthy = 1;
  void clear_ishealthy();
  bool ishealthy() const;
  void set_ishealthy(bool value);
  private:
  bool _internal_ishealthy() const;
  void _internal_set_ishealthy(bool value);
  public:

  // bool isDone = 2;
  void clear_isdone();
  bool isdone() const;
  void set_isdone(bool value);
  private:
  bool _internal_isdone() const;
  void _internal_set_isdone(bool value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.workerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ishealthy_;
  bool isdone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// -------------------------------------------------------------------

class jobResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:masterworker.jobResult) */ {
 public:
  inline jobResult() : jobResult(nullptr) {}
  virtual ~jobResult();

  jobResult(const jobResult& from);
  jobResult(jobResult&& from) noexcept
    : jobResult() {
    *this = ::std::move(from);
  }

  inline jobResult& operator=(const jobResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline jobResult& operator=(jobResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const jobResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const jobResult* internal_default_instance() {
    return reinterpret_cast<const jobResult*>(
               &_jobResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(jobResult& a, jobResult& b) {
    a.Swap(&b);
  }
  inline void Swap(jobResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(jobResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline jobResult* New() const final {
    return CreateMaybeMessage<jobResult>(nullptr);
  }

  jobResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<jobResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const jobResult& from);
  void MergeFrom(const jobResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(jobResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "masterworker.jobResult";
  }
  protected:
  explicit jobResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_masterworker_2eproto);
    return ::descriptor_table_masterworker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputPathFieldNumber = 1,
    kJobIDFieldNumber = 2,
  };
  // string outputPath = 1;
  void clear_outputpath();
  const std::string& outputpath() const;
  void set_outputpath(const std::string& value);
  void set_outputpath(std::string&& value);
  void set_outputpath(const char* value);
  void set_outputpath(const char* value, size_t size);
  std::string* mutable_outputpath();
  std::string* release_outputpath();
  void set_allocated_outputpath(std::string* outputpath);
  private:
  const std::string& _internal_outputpath() const;
  void _internal_set_outputpath(const std::string& value);
  std::string* _internal_mutable_outputpath();
  public:

  // int32 jobID = 2;
  void clear_jobid();
  ::PROTOBUF_NAMESPACE_ID::int32 jobid() const;
  void set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_jobid() const;
  void _internal_set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:masterworker.jobResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outputpath_;
  ::PROTOBUF_NAMESPACE_ID::int32 jobid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_masterworker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// dummy

// -------------------------------------------------------------------

// workerJob

// repeated string reduceFilesList = 1;
inline int workerJob::_internal_reducefileslist_size() const {
  return reducefileslist_.size();
}
inline int workerJob::reducefileslist_size() const {
  return _internal_reducefileslist_size();
}
inline void workerJob::clear_reducefileslist() {
  reducefileslist_.Clear();
}
inline std::string* workerJob::add_reducefileslist() {
  // @@protoc_insertion_point(field_add_mutable:masterworker.workerJob.reduceFilesList)
  return _internal_add_reducefileslist();
}
inline const std::string& workerJob::_internal_reducefileslist(int index) const {
  return reducefileslist_.Get(index);
}
inline const std::string& workerJob::reducefileslist(int index) const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.reduceFilesList)
  return _internal_reducefileslist(index);
}
inline std::string* workerJob::mutable_reducefileslist(int index) {
  // @@protoc_insertion_point(field_mutable:masterworker.workerJob.reduceFilesList)
  return reducefileslist_.Mutable(index);
}
inline void workerJob::set_reducefileslist(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:masterworker.workerJob.reduceFilesList)
  reducefileslist_.Mutable(index)->assign(value);
}
inline void workerJob::set_reducefileslist(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:masterworker.workerJob.reduceFilesList)
  reducefileslist_.Mutable(index)->assign(std::move(value));
}
inline void workerJob::set_reducefileslist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reducefileslist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:masterworker.workerJob.reduceFilesList)
}
inline void workerJob::set_reducefileslist(int index, const char* value, size_t size) {
  reducefileslist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:masterworker.workerJob.reduceFilesList)
}
inline std::string* workerJob::_internal_add_reducefileslist() {
  return reducefileslist_.Add();
}
inline void workerJob::add_reducefileslist(const std::string& value) {
  reducefileslist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:masterworker.workerJob.reduceFilesList)
}
inline void workerJob::add_reducefileslist(std::string&& value) {
  reducefileslist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:masterworker.workerJob.reduceFilesList)
}
inline void workerJob::add_reducefileslist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reducefileslist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:masterworker.workerJob.reduceFilesList)
}
inline void workerJob::add_reducefileslist(const char* value, size_t size) {
  reducefileslist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:masterworker.workerJob.reduceFilesList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
workerJob::reducefileslist() const {
  // @@protoc_insertion_point(field_list:masterworker.workerJob.reduceFilesList)
  return reducefileslist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
workerJob::mutable_reducefileslist() {
  // @@protoc_insertion_point(field_mutable_list:masterworker.workerJob.reduceFilesList)
  return &reducefileslist_;
}

// string mapFilePath = 2;
inline void workerJob::clear_mapfilepath() {
  mapfilepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& workerJob::mapfilepath() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.mapFilePath)
  return _internal_mapfilepath();
}
inline void workerJob::set_mapfilepath(const std::string& value) {
  _internal_set_mapfilepath(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.mapFilePath)
}
inline std::string* workerJob::mutable_mapfilepath() {
  // @@protoc_insertion_point(field_mutable:masterworker.workerJob.mapFilePath)
  return _internal_mutable_mapfilepath();
}
inline const std::string& workerJob::_internal_mapfilepath() const {
  return mapfilepath_.Get();
}
inline void workerJob::_internal_set_mapfilepath(const std::string& value) {
  
  mapfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void workerJob::set_mapfilepath(std::string&& value) {
  
  mapfilepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.workerJob.mapFilePath)
}
inline void workerJob::set_mapfilepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mapfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.workerJob.mapFilePath)
}
inline void workerJob::set_mapfilepath(const char* value,
    size_t size) {
  
  mapfilepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.workerJob.mapFilePath)
}
inline std::string* workerJob::_internal_mutable_mapfilepath() {
  
  return mapfilepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* workerJob::release_mapfilepath() {
  // @@protoc_insertion_point(field_release:masterworker.workerJob.mapFilePath)
  return mapfilepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void workerJob::set_allocated_mapfilepath(std::string* mapfilepath) {
  if (mapfilepath != nullptr) {
    
  } else {
    
  }
  mapfilepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mapfilepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.workerJob.mapFilePath)
}

// int32 startIdxMapper = 3;
inline void workerJob::clear_startidxmapper() {
  startidxmapper_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::_internal_startidxmapper() const {
  return startidxmapper_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::startidxmapper() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.startIdxMapper)
  return _internal_startidxmapper();
}
inline void workerJob::_internal_set_startidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startidxmapper_ = value;
}
inline void workerJob::set_startidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startidxmapper(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.startIdxMapper)
}

// int32 endIdxMapper = 4;
inline void workerJob::clear_endidxmapper() {
  endidxmapper_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::_internal_endidxmapper() const {
  return endidxmapper_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::endidxmapper() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.endIdxMapper)
  return _internal_endidxmapper();
}
inline void workerJob::_internal_set_endidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endidxmapper_ = value;
}
inline void workerJob::set_endidxmapper(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endidxmapper(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.endIdxMapper)
}

// .masterworker.workerJob.jobTypeEnum jobType = 5;
inline void workerJob::clear_jobtype() {
  jobtype_ = 0;
}
inline ::masterworker::workerJob_jobTypeEnum workerJob::_internal_jobtype() const {
  return static_cast< ::masterworker::workerJob_jobTypeEnum >(jobtype_);
}
inline ::masterworker::workerJob_jobTypeEnum workerJob::jobtype() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.jobType)
  return _internal_jobtype();
}
inline void workerJob::_internal_set_jobtype(::masterworker::workerJob_jobTypeEnum value) {
  
  jobtype_ = value;
}
inline void workerJob::set_jobtype(::masterworker::workerJob_jobTypeEnum value) {
  _internal_set_jobtype(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.jobType)
}

// string userID = 6;
inline void workerJob::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& workerJob::userid() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.userID)
  return _internal_userid();
}
inline void workerJob::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.userID)
}
inline std::string* workerJob::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:masterworker.workerJob.userID)
  return _internal_mutable_userid();
}
inline const std::string& workerJob::_internal_userid() const {
  return userid_.Get();
}
inline void workerJob::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void workerJob::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.workerJob.userID)
}
inline void workerJob::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.workerJob.userID)
}
inline void workerJob::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.workerJob.userID)
}
inline std::string* workerJob::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* workerJob::release_userid() {
  // @@protoc_insertion_point(field_release:masterworker.workerJob.userID)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void workerJob::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.workerJob.userID)
}

// int32 jobID = 7;
inline void workerJob::clear_jobid() {
  jobid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::_internal_jobid() const {
  return jobid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 workerJob::jobid() const {
  // @@protoc_insertion_point(field_get:masterworker.workerJob.jobID)
  return _internal_jobid();
}
inline void workerJob::_internal_set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jobid_ = value;
}
inline void workerJob::set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jobid(value);
  // @@protoc_insertion_point(field_set:masterworker.workerJob.jobID)
}

// -------------------------------------------------------------------

// workerInfo

// string workerIP = 1;
inline void workerInfo::clear_workerip() {
  workerip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& workerInfo::workerip() const {
  // @@protoc_insertion_point(field_get:masterworker.workerInfo.workerIP)
  return _internal_workerip();
}
inline void workerInfo::set_workerip(const std::string& value) {
  _internal_set_workerip(value);
  // @@protoc_insertion_point(field_set:masterworker.workerInfo.workerIP)
}
inline std::string* workerInfo::mutable_workerip() {
  // @@protoc_insertion_point(field_mutable:masterworker.workerInfo.workerIP)
  return _internal_mutable_workerip();
}
inline const std::string& workerInfo::_internal_workerip() const {
  return workerip_.Get();
}
inline void workerInfo::_internal_set_workerip(const std::string& value) {
  
  workerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void workerInfo::set_workerip(std::string&& value) {
  
  workerip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.workerInfo.workerIP)
}
inline void workerInfo::set_workerip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.workerInfo.workerIP)
}
inline void workerInfo::set_workerip(const char* value,
    size_t size) {
  
  workerip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.workerInfo.workerIP)
}
inline std::string* workerInfo::_internal_mutable_workerip() {
  
  return workerip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* workerInfo::release_workerip() {
  // @@protoc_insertion_point(field_release:masterworker.workerInfo.workerIP)
  return workerip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void workerInfo::set_allocated_workerip(std::string* workerip) {
  if (workerip != nullptr) {
    
  } else {
    
  }
  workerip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workerip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.workerInfo.workerIP)
}

// -------------------------------------------------------------------

// workerStatus

// bool isHealthy = 1;
inline void workerStatus::clear_ishealthy() {
  ishealthy_ = false;
}
inline bool workerStatus::_internal_ishealthy() const {
  return ishealthy_;
}
inline bool workerStatus::ishealthy() const {
  // @@protoc_insertion_point(field_get:masterworker.workerStatus.isHealthy)
  return _internal_ishealthy();
}
inline void workerStatus::_internal_set_ishealthy(bool value) {
  
  ishealthy_ = value;
}
inline void workerStatus::set_ishealthy(bool value) {
  _internal_set_ishealthy(value);
  // @@protoc_insertion_point(field_set:masterworker.workerStatus.isHealthy)
}

// bool isDone = 2;
inline void workerStatus::clear_isdone() {
  isdone_ = false;
}
inline bool workerStatus::_internal_isdone() const {
  return isdone_;
}
inline bool workerStatus::isdone() const {
  // @@protoc_insertion_point(field_get:masterworker.workerStatus.isDone)
  return _internal_isdone();
}
inline void workerStatus::_internal_set_isdone(bool value) {
  
  isdone_ = value;
}
inline void workerStatus::set_isdone(bool value) {
  _internal_set_isdone(value);
  // @@protoc_insertion_point(field_set:masterworker.workerStatus.isDone)
}

// -------------------------------------------------------------------

// jobResult

// string outputPath = 1;
inline void jobResult::clear_outputpath() {
  outputpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& jobResult::outputpath() const {
  // @@protoc_insertion_point(field_get:masterworker.jobResult.outputPath)
  return _internal_outputpath();
}
inline void jobResult::set_outputpath(const std::string& value) {
  _internal_set_outputpath(value);
  // @@protoc_insertion_point(field_set:masterworker.jobResult.outputPath)
}
inline std::string* jobResult::mutable_outputpath() {
  // @@protoc_insertion_point(field_mutable:masterworker.jobResult.outputPath)
  return _internal_mutable_outputpath();
}
inline const std::string& jobResult::_internal_outputpath() const {
  return outputpath_.Get();
}
inline void jobResult::_internal_set_outputpath(const std::string& value) {
  
  outputpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void jobResult::set_outputpath(std::string&& value) {
  
  outputpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:masterworker.jobResult.outputPath)
}
inline void jobResult::set_outputpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outputpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:masterworker.jobResult.outputPath)
}
inline void jobResult::set_outputpath(const char* value,
    size_t size) {
  
  outputpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:masterworker.jobResult.outputPath)
}
inline std::string* jobResult::_internal_mutable_outputpath() {
  
  return outputpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* jobResult::release_outputpath() {
  // @@protoc_insertion_point(field_release:masterworker.jobResult.outputPath)
  return outputpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void jobResult::set_allocated_outputpath(std::string* outputpath) {
  if (outputpath != nullptr) {
    
  } else {
    
  }
  outputpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outputpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:masterworker.jobResult.outputPath)
}

// int32 jobID = 2;
inline void jobResult::clear_jobid() {
  jobid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 jobResult::_internal_jobid() const {
  return jobid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 jobResult::jobid() const {
  // @@protoc_insertion_point(field_get:masterworker.jobResult.jobID)
  return _internal_jobid();
}
inline void jobResult::_internal_set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  jobid_ = value;
}
inline void jobResult::set_jobid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_jobid(value);
  // @@protoc_insertion_point(field_set:masterworker.jobResult.jobID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterworker

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::masterworker::workerJob_jobTypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::masterworker::workerJob_jobTypeEnum>() {
  return ::masterworker::workerJob_jobTypeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_masterworker_2eproto
