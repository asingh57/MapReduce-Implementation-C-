// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterworker.proto

#include "masterworker.pb.h"
#include "masterworker.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace masterworker {

static const char* worker_method_names[] = {
  "/masterworker.worker/getHealth",
  "/masterworker.worker/setJob",
  "/masterworker.worker/jobDoneResults",
};

std::unique_ptr< worker::Stub> worker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< worker::Stub> stub(new worker::Stub(channel));
  return stub;
}

worker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_getHealth_(worker_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setJob_(worker_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_jobDoneResults_(worker_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status worker::Stub::getHealth(::grpc::ClientContext* context, const ::masterworker::masterInfo& request, ::masterworker::workerStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getHealth_, context, request, response);
}

void worker::Stub::experimental_async::getHealth(::grpc::ClientContext* context, const ::masterworker::masterInfo* request, ::masterworker::workerStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getHealth_, context, request, response, std::move(f));
}

void worker::Stub::experimental_async::getHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::workerStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_getHealth_, context, request, response, std::move(f));
}

void worker::Stub::experimental_async::getHealth(::grpc::ClientContext* context, const ::masterworker::masterInfo* request, ::masterworker::workerStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getHealth_, context, request, response, reactor);
}

void worker::Stub::experimental_async::getHealth(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::workerStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_getHealth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::masterworker::workerStatus>* worker::Stub::AsyncgetHealthRaw(::grpc::ClientContext* context, const ::masterworker::masterInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::workerStatus>::Create(channel_.get(), cq, rpcmethod_getHealth_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::masterworker::workerStatus>* worker::Stub::PrepareAsyncgetHealthRaw(::grpc::ClientContext* context, const ::masterworker::masterInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::workerStatus>::Create(channel_.get(), cq, rpcmethod_getHealth_, context, request, false);
}

::grpc::Status worker::Stub::setJob(::grpc::ClientContext* context, const ::masterworker::workerJob& request, ::masterworker::workerStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_setJob_, context, request, response);
}

void worker::Stub::experimental_async::setJob(::grpc::ClientContext* context, const ::masterworker::workerJob* request, ::masterworker::workerStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setJob_, context, request, response, std::move(f));
}

void worker::Stub::experimental_async::setJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::workerStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_setJob_, context, request, response, std::move(f));
}

void worker::Stub::experimental_async::setJob(::grpc::ClientContext* context, const ::masterworker::workerJob* request, ::masterworker::workerStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setJob_, context, request, response, reactor);
}

void worker::Stub::experimental_async::setJob(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::workerStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_setJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::masterworker::workerStatus>* worker::Stub::AsyncsetJobRaw(::grpc::ClientContext* context, const ::masterworker::workerJob& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::workerStatus>::Create(channel_.get(), cq, rpcmethod_setJob_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::masterworker::workerStatus>* worker::Stub::PrepareAsyncsetJobRaw(::grpc::ClientContext* context, const ::masterworker::workerJob& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::workerStatus>::Create(channel_.get(), cq, rpcmethod_setJob_, context, request, false);
}

::grpc::Status worker::Stub::jobDoneResults(::grpc::ClientContext* context, const ::masterworker::workerJob& request, ::masterworker::jobResultsInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_jobDoneResults_, context, request, response);
}

void worker::Stub::experimental_async::jobDoneResults(::grpc::ClientContext* context, const ::masterworker::workerJob* request, ::masterworker::jobResultsInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_jobDoneResults_, context, request, response, std::move(f));
}

void worker::Stub::experimental_async::jobDoneResults(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::jobResultsInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_jobDoneResults_, context, request, response, std::move(f));
}

void worker::Stub::experimental_async::jobDoneResults(::grpc::ClientContext* context, const ::masterworker::workerJob* request, ::masterworker::jobResultsInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_jobDoneResults_, context, request, response, reactor);
}

void worker::Stub::experimental_async::jobDoneResults(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::masterworker::jobResultsInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_jobDoneResults_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::masterworker::jobResultsInfo>* worker::Stub::AsyncjobDoneResultsRaw(::grpc::ClientContext* context, const ::masterworker::workerJob& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::jobResultsInfo>::Create(channel_.get(), cq, rpcmethod_jobDoneResults_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::masterworker::jobResultsInfo>* worker::Stub::PrepareAsyncjobDoneResultsRaw(::grpc::ClientContext* context, const ::masterworker::workerJob& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::masterworker::jobResultsInfo>::Create(channel_.get(), cq, rpcmethod_jobDoneResults_, context, request, false);
}

worker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      worker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< worker::Service, ::masterworker::masterInfo, ::masterworker::workerStatus>(
          [](worker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::masterworker::masterInfo* req,
             ::masterworker::workerStatus* resp) {
               return service->getHealth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      worker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< worker::Service, ::masterworker::workerJob, ::masterworker::workerStatus>(
          [](worker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::masterworker::workerJob* req,
             ::masterworker::workerStatus* resp) {
               return service->setJob(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      worker_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< worker::Service, ::masterworker::workerJob, ::masterworker::jobResultsInfo>(
          [](worker::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::masterworker::workerJob* req,
             ::masterworker::jobResultsInfo* resp) {
               return service->jobDoneResults(ctx, req, resp);
             }, this)));
}

worker::Service::~Service() {
}

::grpc::Status worker::Service::getHealth(::grpc::ServerContext* context, const ::masterworker::masterInfo* request, ::masterworker::workerStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status worker::Service::setJob(::grpc::ServerContext* context, const ::masterworker::workerJob* request, ::masterworker::workerStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status worker::Service::jobDoneResults(::grpc::ServerContext* context, const ::masterworker::workerJob* request, ::masterworker::jobResultsInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace masterworker

